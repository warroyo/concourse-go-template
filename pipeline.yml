
jobs:
- name: build
  plan:
    - aggregate:
      - get: tools
      - get: repo
        trigger: true
    - task: task-build
      file: tools/tasks/build/task.yml
    - put: app-image
      params: 
        build: out
        
- name: k8s-deploy-test
  plan:
  - get: repo
    trigger: true
    passed: 
      - build
  - put: kubernetes-test
    params:
      kubectl: apply -f repo/k8s/service.yml -f repo/k8s/deployment.yml
      wait_until_ready_selector: app=((app_name))

- name: test-smoke
  plan:
    - aggregate:
      - get: tools
      - get: repo
        trigger: true
        passed: 
          - k8s-deploy-test
    - task: task-k8s-service
      file: tools/tasks/service/task.yml
      params:
        k8s_namespace: test
        k8s_token: ((kube_concourse))
        k8s_service: ((app_name))
    # - task: task-smoke
    #   file: tools/tasks/smoke/task.yml
        

- name: k8s-deploy-stage
  plan:
  - get: repo
    trigger: true
    passed: 
      - test-smoke
  - put: kubernetes-stage
    params:
      kubectl: apply -f repo/k8s/service.yml -f repo/k8s/deployment.yml
      wait_until_ready_selector: app=((app_name))


resource_types:
- name: kubernetes
  type: docker-image
  source:
    repository: zlabjp/kubernetes-resource
    tag: "1.11"

resources:
- name: repo
  type: git
  source:
    uri: ((repo_url))
    branch: master
    private_key: ((github_rsa.private_key))
- name: tools
  type: git
  source:
    uri: https://github.com/warroyo/concourse-go-template.git
    branch: master
- name: app-image
  type: docker-image
  source:
    repository: warroyo90/((app_name))
    username: ((docker_login.username))
    password: ((docker_login.password))
- name: kubernetes-stage
  type: kubernetes
  source:
    server: https://dev.clusters.warroyo.com:8443
    namespace: stage
    token: ((kube_concourse))
    certificate_authority: ((kube_concourse_ca.certificate))
- name: kubernetes-test
  type: kubernetes
  source:
    server: https://dev.clusters.warroyo.com:8443
    namespace: test
    token: ((kube_concourse))
    certificate_authority: ((kube_concourse_ca.certificate))